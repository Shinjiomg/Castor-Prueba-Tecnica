---
import Layout from '../layouts/Layout.astro';
---

<Layout title="MusicApp - Tu música, tu estilo">
  <!-- Contenido principal - Pantalla completa -->
  <div class="h-full bg-black overflow-hidden">
    <!-- Estado inicial - Recomendaciones y búsqueda -->
    <div id="welcome-content" class="h-full overflow-y-auto px-6 py-4">
      <div class="w-full">
        <!-- Hero Section -->
        <div class="text-center mb-12 mt-12">
          <h1 class="text-4xl md:text-6xl font-bold text-white mb-6">
            ¿Qué quieres escuchar hoy?
          </h1>
          <p class="text-gray-300 text-lg md:text-xl max-w-3xl mx-auto">
            Busca tu música favorita o descubre nuevas canciones, artistas y álbumes.
          </p>
        </div>

        <!-- Sección de recomendaciones -->
        <div class="space-y-12">

          <!-- Canciones del momento -->
          <div>
            <div class="flex items-center justify-between mb-6">
              <h2 class="text-2xl font-bold text-white">Canciones del momento</h2>
              <button class="text-white hover:text-gray-300 text-sm font-medium cursor-pointer">Mostrar todo</button>
            </div>
            <div id="top-tracks-grid" class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 xl:grid-cols-4 2xl:grid-cols-5 gap-6">
              <!-- Loading skeleton -->
              <div class="bg-white/10 backdrop-blur-sm rounded-xl p-4 animate-pulse">
                <div class="aspect-square bg-gray-700 rounded-lg mb-4"></div>
                <div class="h-4 bg-gray-700 rounded mb-2"></div>
                <div class="h-3 bg-gray-700 rounded w-2/3"></div>
              </div>
              <div class="bg-white/10 backdrop-blur-sm rounded-xl p-4 animate-pulse">
                <div class="aspect-square bg-gray-700 rounded-lg mb-4"></div>
                <div class="h-4 bg-gray-700 rounded mb-2"></div>
                <div class="h-3 bg-gray-700 rounded w-2/3"></div>
              </div>
              <div class="bg-white/10 backdrop-blur-sm rounded-xl p-4 animate-pulse">
                <div class="aspect-square bg-gray-700 rounded-lg mb-4"></div>
                <div class="h-4 bg-gray-700 rounded mb-2"></div>
                <div class="h-3 bg-gray-700 rounded w-2/3"></div>
              </div>
              <div class="bg-white/10 backdrop-blur-sm rounded-xl p-4 animate-pulse">
                <div class="aspect-square bg-gray-700 rounded-lg mb-4"></div>
                <div class="h-4 bg-gray-700 rounded mb-2"></div>
                <div class="h-3 bg-gray-700 rounded w-2/3"></div>
              </div>
              <div class="bg-white/10 backdrop-blur-sm rounded-xl p-4 animate-pulse">
                <div class="aspect-square bg-gray-700 rounded-lg mb-4"></div>
                <div class="h-4 bg-gray-700 rounded mb-2"></div>
                <div class="h-3 bg-gray-700 rounded w-2/3"></div>
              </div>
            </div>
          </div>

          <!-- Nuevos lanzamientos -->
          <div>
            <div class="flex items-center justify-between mb-6">
              <h2 class="text-2xl font-bold text-white">Nuevos lanzamientos</h2>
              <button class="text-white hover:text-gray-300 text-sm font-medium cursor-pointer">Mostrar todo</button>
            </div>
            <div id="new-releases-grid" class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 xl:grid-cols-4 2xl:grid-cols-5 gap-6">
              <!-- Loading skeleton -->
              <div class="bg-white/10 backdrop-blur-sm rounded-xl p-4 animate-pulse">
                <div class="aspect-square bg-gray-700 rounded-lg mb-4"></div>
                <div class="h-4 bg-gray-700 rounded mb-2"></div>
                <div class="h-3 bg-gray-700 rounded w-2/3"></div>
              </div>
              <div class="bg-white/10 backdrop-blur-sm rounded-xl p-4 animate-pulse">
                <div class="aspect-square bg-gray-700 rounded-lg mb-4"></div>
                <div class="h-4 bg-gray-700 rounded mb-2"></div>
                <div class="h-3 bg-gray-700 rounded w-2/3"></div>
              </div>
              <div class="bg-white/10 backdrop-blur-sm rounded-xl p-4 animate-pulse">
                <div class="aspect-square bg-gray-700 rounded-lg mb-4"></div>
                <div class="h-4 bg-gray-700 rounded mb-2"></div>
                <div class="h-3 bg-gray-700 rounded w-2/3"></div>
              </div>
              <div class="bg-white/10 backdrop-blur-sm rounded-xl p-4 animate-pulse">
                <div class="aspect-square bg-gray-700 rounded-lg mb-4"></div>
                <div class="h-4 bg-gray-700 rounded mb-2"></div>
                <div class="h-3 bg-gray-700 rounded w-2/3"></div>
              </div>
              <div class="bg-white/10 backdrop-blur-sm rounded-xl p-4 animate-pulse">
                <div class="aspect-square bg-gray-700 rounded-lg mb-4"></div>
                <div class="h-4 bg-gray-700 rounded mb-2"></div>
                <div class="h-3 bg-gray-700 rounded w-2/3"></div>
              </div>
            </div>
          </div>

          <!-- Categorías destacadas -->
          <div>
            <div class="flex items-center justify-between mb-6">
              <h2 class="text-2xl font-bold text-white">Categorías destacadas</h2>
              <button class="text-white hover:text-gray-300 text-sm font-medium cursor-pointer">Mostrar todo</button>
            </div>
            <div id="featured-playlists-grid" class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 xl:grid-cols-4 2xl:grid-cols-5 gap-6">
              <!-- Loading skeleton -->
              <div class="bg-white/10 backdrop-blur-sm rounded-xl p-4 animate-pulse">
                <div class="aspect-square bg-gray-700 rounded-lg mb-4"></div>
                <div class="h-4 bg-gray-700 rounded mb-2"></div>
                <div class="h-3 bg-gray-700 rounded w-2/3"></div>
              </div>
              <div class="bg-white/10 backdrop-blur-sm rounded-xl p-4 animate-pulse">
                <div class="aspect-square bg-gray-700 rounded-lg mb-4"></div>
                <div class="h-4 bg-gray-700 rounded mb-2"></div>
                <div class="h-3 bg-gray-700 rounded w-2/3"></div>
              </div>
              <div class="bg-white/10 backdrop-blur-sm rounded-xl p-4 animate-pulse">
                <div class="aspect-square bg-gray-700 rounded-lg mb-4"></div>
                <div class="h-4 bg-gray-700 rounded mb-2"></div>
                <div class="h-3 bg-gray-700 rounded w-2/3"></div>
              </div>
              <div class="bg-white/10 backdrop-blur-sm rounded-xl p-4 animate-pulse">
                <div class="aspect-square bg-gray-700 rounded-lg mb-4"></div>
                <div class="h-4 bg-gray-700 rounded mb-2"></div>
                <div class="h-3 bg-gray-700 rounded w-2/3"></div>
              </div>
              <div class="bg-white/10 backdrop-blur-sm rounded-xl p-4 animate-pulse">
                <div class="aspect-square bg-gray-700 rounded-lg mb-4"></div>
                <div class="h-4 bg-gray-700 rounded mb-2"></div>
                <div class="h-3 bg-gray-700 rounded w-2/3"></div>
              </div>
            </div>
          </div>
        </div>
      </div>
    </div>
    
    <!-- Área de resultados de búsqueda - Estilo Spotify -->
    <div id="search-results" class="h-full overflow-y-auto hidden">
      <div class="w-full">
        <!-- Filtros de búsqueda - Estilo Spotify -->
        <div class="sticky top-0 z-10 bg-black/95 backdrop-blur-sm border-b border-white/10 px-6 py-4">
          <div class="flex flex-wrap gap-2">
            {[
              { id: 'all', label: 'Todo' },
              { id: 'tracks', label: 'Canciones' },
              { id: 'albums', label: 'Álbumes' },
              { id: 'artists', label: 'Artistas' }
            ].map((filter) => (
              <button
                type="button"
                data-filter={filter.id}
                class={`px-4 py-2 rounded-full text-sm font-medium transition-all duration-200 cursor-pointer ${
                  filter.id === 'all'
                    ? 'bg-white text-black shadow-lg'
                    : 'bg-gray-800/50 text-gray-300 hover:bg-gray-700/50 hover:text-white'
                }`}
              >
                {filter.label}
              </button>
            ))}
          </div>
        </div>

        <!-- Layout dinámico según el filtro -->
        <div id="search-layout" class="px-6 py-4">
          <!-- Layout de 2 columnas para filtro "Todo" -->
          <div id="two-column-layout" class="grid grid-cols-1 lg:grid-cols-2 gap-8">
            <!-- Columna izquierda: Resultado más relevante -->
            <div class="space-y-6">
              <!-- Resultado más relevante - Estilo exacto de la imagen -->
              <div id="top-result">
                <h2 class="text-2xl font-bold text-white mb-4">Resultado más relevante</h2>
                <div id="top-result-content" class="bg-gray-800/40 rounded-xl p-4 hover:bg-gray-800/60 transition-all duration-200 cursor-pointer">
                  <!-- Contenido dinámico -->
                </div>
              </div>
            </div>

            <!-- Columna derecha: Solo lista de canciones (sticky con scroll independiente) -->
            <div>
              <!-- Canciones -->
              <div id="tracks-section" class="hidden sticky top-20 h-[calc(100vh-10rem)] flex flex-col">
                <div class="flex items-center justify-between flex-shrink-0">
                  <h2 class="text-2xl font-bold text-white">Canciones</h2>
                  <button class="text-white hover:text-gray-300 text-sm font-medium cursor-pointer">Mostrar todo</button>
                </div>
                <div id="tracks-list" class="space-y-3 flex-1">
                  <!-- Lista de canciones estilo exacto de la imagen -->
                </div>
              </div>
            </div>
          </div>

          <!-- Layout de ancho completo para filtros específicos -->
          <div id="full-width-layout" class="hidden">
            <!-- Álbumes -->
            <div id="albums-section-full" class="hidden">
              <div class="flex items-center justify-between mb-6">
                <h2 class="text-2xl font-bold text-white">Álbumes</h2>
                <button class="text-white hover:text-gray-300 text-sm font-medium cursor-pointer">Mostrar todo</button>
              </div>
              <div id="albums-grid-full" class="grid grid-cols-2 md:grid-cols-3 lg:grid-cols-4 xl:grid-cols-5 2xl:grid-cols-6 gap-6"></div>
            </div>

            <!-- Artistas -->
            <div id="artists-section-full" class="hidden">
              <div class="flex items-center justify-between mb-6">
                <h2 class="text-2xl font-bold text-white">Artistas</h2>
                <button class="text-white hover:text-gray-300 text-sm font-medium cursor-pointer">Mostrar todo</button>
              </div>
              <div id="artists-grid-full" class="grid grid-cols-2 md:grid-cols-3 lg:grid-cols-4 xl:grid-cols-5 2xl:grid-cols-6 gap-6"></div>
            </div>

            <!-- Canciones -->
            <div id="tracks-section-full" class="hidden">
              <div class="flex items-center justify-between mb-6">
                <h2 class="text-2xl font-bold text-white">Canciones</h2>
                <button class="text-white hover:text-gray-300 text-sm font-medium cursor-pointer">Mostrar todo</button>
              </div>
              <div id="tracks-list-full" class="space-y-3">
                <!-- Lista de canciones de ancho completo -->
              </div>
            </div>
          </div>
        </div>
      </div>
    </div>
  </div>
</Layout>

<script>
  // Variables globales para el estado de búsqueda
  let currentSearchResults: any = null;
  let currentFilter: string = 'all';

  // Variable global para controlar el audio
  let currentAudio: HTMLAudioElement | null = null;
  let currentPlayButton: HTMLElement | null = null;

  // Elementos del DOM
  const welcomeContent = document.getElementById('welcome-content');
  const searchResults = document.getElementById('search-results');
  const topResult = document.getElementById('top-result');
  const tracksSection = document.getElementById('tracks-section');
  const albumsSection = document.getElementById('albums-section');
  const artistsSection = document.getElementById('artists-section');
  const tracksGrid = document.getElementById('tracks-grid');
  const albumsGrid = document.getElementById('albums-grid');
  const artistsGrid = document.getElementById('artists-grid');

  // Función para cargar datos de recomendaciones
  async function loadRecommendations() {
    try {
      // Cargar canciones populares
      console.log('Cargando canciones populares...');
      const topTracksResponse = await fetch('/api/spotify/top-tracks?limit=10');
      const topTracksData = await topTracksResponse.json();
      
      if (topTracksData.success && topTracksData.data) {
        console.log('Canciones populares cargadas:', topTracksData.data.length);
        renderTopTracks(topTracksData.data);
      } else {
        console.error('Error en canciones populares:', topTracksData.error);
        showErrorInSection('top-tracks-grid', 'Error cargando canciones populares');
      }

      // Cargar nuevos lanzamientos
      console.log('Cargando nuevos lanzamientos...');
      const newReleasesResponse = await fetch('/api/spotify/new-releases?limit=10');
      const newReleasesData = await newReleasesResponse.json();
      
      if (newReleasesData.success && newReleasesData.data) {
        console.log('Nuevos lanzamientos cargados:', newReleasesData.data.items.length);
        renderNewReleases(newReleasesData.data.items);
      } else {
        console.error('Error en nuevos lanzamientos:', newReleasesData.error);
        showErrorInSection('new-releases-grid', 'Error cargando nuevos lanzamientos');
      }

      // Cargar categorías destacadas
      console.log('Cargando categorías...');
      const featuredPlaylistsResponse = await fetch('/api/spotify/featured-playlists?limit=10');
      const featuredPlaylistsData = await featuredPlaylistsResponse.json();
      
      if (featuredPlaylistsData.success && featuredPlaylistsData.data) {
        console.log('Categorías cargadas:', featuredPlaylistsData.data.items.length);
        renderFeaturedPlaylists(featuredPlaylistsData.data.items);
      } else {
        console.error('Error en categorías:', featuredPlaylistsData.error);
        showErrorInSection('featured-playlists-grid', 'Error cargando categorías');
      }

    } catch (error) {
      console.error('Error cargando recomendaciones:', error);
    }
  }

  // Función para mostrar errores en una sección
  function showErrorInSection(sectionId: string, message: string) {
    const container = document.getElementById(sectionId);
    if (container) {
      container.innerHTML = `
        <div class="col-span-full text-center py-8">
          <div class="text-gray-400 mb-2">
            <svg class="w-12 h-12 mx-auto mb-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 9v2m0 4h.01m-6.938 4h13.856c1.54 0 2.502-1.667 1.732-2.5L13.732 4c-.77-.833-1.964-.833-2.732 0L3.732 16.5c-.77.833.192 2.5 1.732 2.5z"></path>
            </svg>
          </div>
          <p class="text-gray-400 text-sm">${message}</p>
          <button onclick="loadRecommendations()" class="mt-4 px-4 py-2 bg-white/10 hover:bg-white/20 text-white rounded-lg transition-all duration-200">
            Reintentar
          </button>
        </div>
      `;
    }
  }

  // Función para renderizar canciones populares
  function renderTopTracks(tracks: any[]) {
    const container = document.getElementById('top-tracks-grid')!;
    container.innerHTML = '';

    tracks.forEach((track: any) => {
      const trackElement = document.createElement('div');
      trackElement.className = 'bg-white/10 backdrop-blur-sm rounded-xl p-4 hover:bg-white/20 transition-all duration-200 cursor-pointer border border-white/10 group relative';
      
      const imageUrl = track.album?.images?.[0]?.url || '';
      const gradientClass = getGradientClass(track.name);
      
      trackElement.innerHTML = `
        <div class="aspect-square ${gradientClass} rounded-lg mb-4 flex items-center justify-center relative overflow-hidden">
          ${imageUrl ? `
            <img src="${imageUrl}" alt="${track.name}" class="w-full h-full object-cover" onerror="this.style.display='none'; this.nextElementSibling.style.display='flex';">
            <div class="absolute inset-0 bg-black/20 group-hover:bg-black/40 transition-all duration-200"></div>
            <div class="absolute inset-0 flex items-center justify-center">
              <button type="button" class="w-12 h-12 bg-green-500 rounded-full flex items-center justify-center opacity-0 group-hover:opacity-100 transition-all duration-200 transform group-hover:scale-110 shadow-lg play-preview-btn" data-preview-url="${track.preview_url || ''}" ${track.preview_url ? '' : 'disabled'}>
                <svg class="w-6 h-6 text-white ml-0.5" fill="currentColor" viewBox="0 0 24 24">
                  <path d="M8 5v14l11-7z"/>
                </svg>
              </button>
            </div>
          ` : `
            <div class="absolute inset-0 flex items-center justify-center">
              <button type="button" class="w-12 h-12 bg-green-500 rounded-full flex items-center justify-center opacity-0 group-hover:opacity-100 transition-all duration-200 transform group-hover:scale-110 shadow-lg play-preview-btn" data-preview-url="${track.preview_url || ''}" ${track.preview_url ? '' : 'disabled'}>
                <svg class="w-6 h-6 text-white ml-0.5" fill="currentColor" viewBox="0 0 24 24">
                  <path d="M8 5v14l11-7z"/>
                </svg>
              </button>
            </div>
          `}
          <div class="absolute top-2 right-2 favorite-button-container" data-spotify-id="${track.id}" data-type="track" data-name="${track.name}" data-image-url="${imageUrl}" data-external-url="${track.external_urls?.spotify || ''}"></div>
        </div>
        <h3 class="text-white font-semibold text-sm truncate">${track.name}</h3>
        <p class="text-white/70 text-xs truncate">${track.artists?.map((a: any) => a.name).join(', ') || 'Artista desconocido'}</p>
      `;
      
      container.appendChild(trackElement);
      
      // Renderizar botón de favoritos
      renderFavoriteButton(trackElement.querySelector('.favorite-button-container'), track.id, 'track', track.name, imageUrl, track.external_urls?.spotify);

      // Agregar funcionalidad de reproducción de preview
      const playBtn = trackElement.querySelector('.play-preview-btn') as HTMLElement;
      if (playBtn && track.preview_url) {
        playBtn.addEventListener('click', (e) => {
          e.stopPropagation();
          console.log('Click en play-preview-btn', track.preview_url, playBtn);
          handlePlayPreview(track.preview_url, playBtn);
        });
      }
    });
  }

  // Función para renderizar nuevos lanzamientos
  function renderNewReleases(albums: any[]) {
    const container = document.getElementById('new-releases-grid')!;
    container.innerHTML = '';

    albums.forEach((album: any) => {
      const albumElement = document.createElement('div');
      albumElement.className = 'bg-white/10 backdrop-blur-sm rounded-xl p-4 hover:bg-white/20 transition-all duration-200 cursor-pointer border border-white/10 group relative';
      
      const imageUrl = album.images?.[0]?.url || '';
      const gradientClass = getGradientClass(album.name);
      
      albumElement.innerHTML = `
        <div class="aspect-square ${gradientClass} rounded-lg mb-4 flex items-center justify-center relative overflow-hidden">
          ${imageUrl ? `
            <img src="${imageUrl}" alt="${album.name}" class="w-full h-full object-cover" onerror="this.style.display='none'; this.nextElementSibling.style.display='flex';">
            <div class="absolute inset-0 bg-black/20 group-hover:bg-black/40 transition-all duration-200"></div>
            <svg class="w-12 h-12 text-white relative z-10 opacity-0 group-hover:opacity-100 transition-all duration-200" fill="currentColor" viewBox="0 0 24 24">
              <path d="M12 2C6.48 2 2 6.48 2 12s4.48 10 10 10 10-4.48 10-10S17.52 2 12 2zm-2 15l-5-5 1.41-1.41L10 14.17l7.59-7.59L19 8l-9 9z"/>
            </svg>
          ` : `
            <svg class="w-12 h-12 text-white" fill="currentColor" viewBox="0 0 24 24">
              <path d="M12 2C6.48 2 2 6.48 2 12s4.48 10 10 10 10-4.48 10-10S17.52 2 12 2zm-2 15l-5-5 1.41-1.41L10 14.17l7.59-7.59L19 8l-9 9z"/>
            </svg>
          `}
          <div class="absolute top-2 right-2 favorite-button-container" data-spotify-id="${album.id}" data-type="album" data-name="${album.name}" data-image-url="${imageUrl}" data-external-url="${album.external_urls?.spotify || ''}"></div>
        </div>
        <h3 class="text-white font-semibold text-sm truncate">${album.name}</h3>
        <p class="text-white/70 text-xs truncate">${album.artists?.map((a: any) => a.name).join(', ') || 'Artista desconocido'}</p>
      `;
      
      container.appendChild(albumElement);
      
      // Renderizar botón de favoritos
      renderFavoriteButton(albumElement.querySelector('.favorite-button-container'), album.id, 'album', album.name, imageUrl, album.external_urls?.spotify);
    });
  }

  // Función para renderizar playlists destacadas
  function renderFeaturedPlaylists(playlists: any[]) {
    const container = document.getElementById('featured-playlists-grid')!;
    container!.innerHTML = '';

    playlists.forEach((playlist: any) => {
      const playlistElement = document.createElement('div');
      playlistElement.className = 'bg-white/10 backdrop-blur-sm rounded-xl p-4 hover:bg-white/20 transition-all duration-200 cursor-pointer border border-white/10 group';
      
      const imageUrl = playlist.images?.[0]?.url || '';
      const gradientClass = getGradientClass(playlist.name);
      
      playlistElement.innerHTML = `
        <div class="aspect-square ${gradientClass} rounded-lg mb-4 flex items-center justify-center relative overflow-hidden">
          ${imageUrl ? `
            <img src="${imageUrl}" alt="${playlist.name}" class="w-full h-full object-cover" onerror="this.style.display='none'; this.nextElementSibling.style.display='flex';">
            <div class="absolute inset-0 bg-black/20 group-hover:bg-black/40 transition-all duration-200"></div>
            <svg class="w-12 h-12 text-white relative z-10 opacity-0 group-hover:opacity-100 transition-all duration-200" fill="currentColor" viewBox="0 0 24 24">
              <path d="M12 2C6.48 2 2 6.48 2 12s4.48 10 10 10 10-4.48 10-10S17.52 2 12 2zm-2 15l-5-5 1.41-1.41L10 14.17l7.59-7.59L19 8l-9 9z"/>
            </svg>
          ` : `
            <svg class="w-12 h-12 text-white" fill="currentColor" viewBox="0 0 24 24">
              <path d="M12 2C6.48 2 2 6.48 2 12s4.48 10 10 10 10-4.48 10-10S17.52 2 12 2zm-2 15l-5-5 1.41-1.41L10 14.17l7.59-7.59L19 8l-9 9z"/>
            </svg>
          `}
        </div>
        <h3 class="text-white font-semibold text-sm truncate">${playlist.name}</h3>
        <p class="text-white/70 text-xs truncate">${playlist.description || 'Playlist'}</p>
      `;
      
      container!.appendChild(playlistElement);
    });
  }

  // Función para obtener clase de gradiente basada en el nombre
  function getGradientClass(name: string) {
    const gradients = [
      'bg-gradient-to-br from-purple-500 to-pink-500',
      'bg-gradient-to-br from-blue-500 to-cyan-500',
      'bg-gradient-to-br from-green-500 to-emerald-500',
      'bg-gradient-to-br from-red-500 to-orange-500',
      'bg-gradient-to-br from-pink-500 to-rose-500',
      'bg-gradient-to-br from-indigo-500 to-purple-500',
      'bg-gradient-to-br from-teal-500 to-blue-500',
      'bg-gradient-to-br from-rose-500 to-pink-500',
      'bg-gradient-to-br from-amber-500 to-orange-500',
      'bg-gradient-to-br from-lime-500 to-green-500'
    ];
    
    // Usar el hash del nombre para seleccionar un gradiente consistente
    let hash = 0;
    for (let i = 0; i < name.length; i++) {
      hash = name.charCodeAt(i) + ((hash << 5) - hash);
    }
    return gradients[Math.abs(hash) % gradients.length];
  }

  // Función para mostrar resultados de búsqueda - Estilo Spotify
  function showSearchResults(results: any) {
    currentSearchResults = results;
    welcomeContent?.classList.add('hidden');
    searchResults?.classList.remove('hidden');
    
    // Elementos del layout de 2 columnas
    const topResultContent = document.getElementById('top-result-content');
    const tracksList = document.getElementById('tracks-list');
    const twoColumnLayout = document.getElementById('two-column-layout');
    
    // Elementos del layout de ancho completo
    const albumsGridFull = document.getElementById('albums-grid-full');
    const artistsGridFull = document.getElementById('artists-grid-full');
    const tracksListFull = document.getElementById('tracks-list-full');
    const albumsSectionFull = document.getElementById('albums-section-full');
    const artistsSectionFull = document.getElementById('artists-section-full');
    const tracksSectionFull = document.getElementById('tracks-section-full');
    const fullWidthLayout = document.getElementById('full-width-layout');
    
    // Limpiar todos los contenedores
    if (topResultContent) topResultContent.innerHTML = '';
    if (tracksList) tracksList.innerHTML = '';
    if (albumsGridFull) albumsGridFull.innerHTML = '';
    if (artistsGridFull) artistsGridFull.innerHTML = '';
    if (tracksListFull) tracksListFull.innerHTML = '';
    
    // Limpiar secciones dinámicas del sidebar
    const sidebarAlbums = document.getElementById('albums-grid-sidebar');
    const sidebarArtists = document.getElementById('artists-grid-sidebar');
    if (sidebarAlbums) {
      const albumsSection = sidebarAlbums.closest('div[class*="mt-8"]');
      if (albumsSection) albumsSection.remove();
    }
    if (sidebarArtists) {
      const artistsSection = sidebarArtists.closest('div[class*="mt-8"]');
      if (artistsSection) artistsSection.remove();
    }
    
    // Ocultar todas las secciones
    const sections = ['tracks-section', 'albums-section', 'artists-section'];
    sections.forEach(sectionId => {
      const section = document.getElementById(sectionId);
      if (section) section.classList.add('hidden');
    });
    
    // Ocultar todas las secciones de ancho completo
    const fullSections = ['albums-section-full', 'artists-section-full', 'tracks-section-full'];
    fullSections.forEach(sectionId => {
      const section = document.getElementById(sectionId);
      if (section) section.classList.add('hidden');
    });
    
    // Ocultar todas las secciones
    tracksSection?.classList.add('hidden');
    albumsSection?.classList.add('hidden');
    artistsSection?.classList.add('hidden');

    if (!results) return;

    // Mostrar resultado más relevante según el filtro actual
    // Determinar qué layout usar según el filtro
    if (currentFilter === 'all') {
      // Layout de 2 columnas para "Todo"
      twoColumnLayout?.classList.remove('hidden');
      fullWidthLayout?.classList.add('hidden');
      
      // Renderizar resultado más relevante
      renderTopResult(results);
      
      // Mostrar canciones en la columna derecha
      if (results.tracks?.items?.length > 0) {
        renderTracksList(results.tracks.items.slice(0, 9));
      }
      
      // Mostrar álbumes y artistas en la columna izquierda (debajo del resultado más relevante)
      const topResult = document.getElementById('top-result');
      
      // Agregar sección de álbumes si hay resultados
      if (results.albums?.items?.length > 0) {
        const albumsSection = document.createElement('div');
        albumsSection.className = 'mt-8';
        albumsSection.innerHTML = `
          <div class="flex items-center justify-between mb-4">
            <h2 class="text-2xl font-bold text-white">Álbumes</h2>
            <button class="text-white hover:text-gray-300 text-sm font-medium cursor-pointer">Mostrar todo</button>
          </div>
          <div class="grid grid-cols-2 md:grid-cols-3 gap-4" id="albums-grid-sidebar"></div>
        `;
        topResult?.parentNode?.insertBefore(albumsSection, topResult.nextSibling);
        
        // Renderizar álbumes
        const albumsGridSidebar = document.getElementById('albums-grid-sidebar');
        if (albumsGridSidebar) {
          results.albums.items.slice(0, 6).forEach((album: any) => {
            const albumElement = document.createElement('div');
            albumElement.className = 'group cursor-pointer';
            
            const imageUrl = album.images?.[0]?.url || '';
            const gradientClass = getGradientClass(album.name);
            
            albumElement.innerHTML = `
              <div class="aspect-square ${gradientClass} rounded-lg mb-3 flex items-center justify-center relative overflow-hidden group-hover:scale-105 transition-all duration-200">
                ${imageUrl ? `
                  <img src="${imageUrl}" alt="${album.name}" class="w-full h-full object-cover" onerror="this.style.display='none'; this.nextElementSibling.style.display='flex';">
                  <div class="absolute inset-0 bg-black/20 group-hover:bg-black/40 transition-all duration-200"></div>
                  <svg class="w-8 h-8 text-white relative z-10 opacity-0 group-hover:opacity-100 transition-all duration-200" fill="currentColor" viewBox="0 0 24 24">
                    <path d="M8 5v14l11-7z"/>
                  </svg>
                ` : `
                  <svg class="w-8 h-8 text-white" fill="currentColor" viewBox="0 0 24 24">
                    <path d="M8 5v14l11-7z"/>
                  </svg>
                `}
                <div class="absolute top-2 right-2 favorite-button-container" data-spotify-id="${album.id}" data-type="album" data-name="${album.name}" data-image-url="${imageUrl}" data-external-url="${album.external_urls?.spotify || ''}"></div>
              </div>
              <h3 class="text-white font-semibold text-sm truncate mb-1">${album.name}</h3>
              <p class="text-white/70 text-xs truncate">${album.artists?.map((a: any) => a.name).join(', ')}</p>
            `;
            albumsGridSidebar.appendChild(albumElement);
            
            // Renderizar botón de favoritos
            renderFavoriteButton(albumElement.querySelector('.favorite-button-container'), album.id, 'album', album.name, imageUrl, album.external_urls?.spotify);
          });
        }
      }
      
      // Agregar sección de artistas si hay resultados
      if (results.artists?.items?.length > 0) {
        const artistsSection = document.createElement('div');
        artistsSection.className = 'mt-8';
        artistsSection.innerHTML = `
          <div class="flex items-center justify-between mb-4">
            <h2 class="text-2xl font-bold text-white">Artistas</h2>
            <button class="text-white hover:text-gray-300 text-sm font-medium cursor-pointer">Mostrar todo</button>
          </div>
          <div class="grid grid-cols-2 md:grid-cols-3 gap-4" id="artists-grid-sidebar"></div>
        `;
        topResult?.parentNode?.insertBefore(artistsSection, topResult.nextSibling);
        
        // Renderizar artistas
        const artistsGridSidebar = document.getElementById('artists-grid-sidebar');
        if (artistsGridSidebar) {
          results.artists.items.slice(0, 6).forEach((artist: any) => {
            const artistElement = document.createElement('div');
            artistElement.className = 'group cursor-pointer text-center';
            
            const imageUrl = artist.images?.[0]?.url || '';
            const gradientClass = getGradientClass(artist.name);
            
            artistElement.innerHTML = `
              <div class="w-20 h-20 ${gradientClass} rounded-full mb-3 flex items-center justify-center relative overflow-hidden mx-auto group-hover:scale-105 transition-all duration-200">
                ${imageUrl ? `
                  <img src="${imageUrl}" alt="${artist.name}" class="w-full h-full object-cover rounded-full" onerror="this.style.display='none'; this.nextElementSibling.style.display='flex';">
                  <div class="absolute inset-0 bg-black/20 group-hover:bg-black/40 transition-all duration-200"></div>
                  <svg class="w-6 h-6 text-white relative z-10 opacity-0 group-hover:opacity-100 transition-all duration-200" fill="currentColor" viewBox="0 0 24 24">
                    <path d="M8 5v14l11-7z"/>
                  </svg>
                ` : `
                  <svg class="w-6 h-6 text-white" fill="currentColor" viewBox="0 0 24 24">
                    <path d="M8 5v14l11-7z"/>
                  </svg>
                `}
                <div class="absolute top-1 right-1 favorite-button-container" data-spotify-id="${artist.id}" data-type="artist" data-name="${artist.name}" data-image-url="${imageUrl}" data-external-url="${artist.external_urls?.spotify || ''}"></div>
              </div>
              <h3 class="text-white font-semibold text-sm truncate mb-1">${artist.name}</h3>
              <p class="text-white/70 text-xs">Artista</p>
            `;
            artistsGridSidebar.appendChild(artistElement);
            
            // Renderizar botón de favoritos
            renderFavoriteButton(artistElement.querySelector('.favorite-button-container'), artist.id, 'artist', artist.name, imageUrl, artist.external_urls?.spotify);
          });
        }
      }
    } else {
      // Layout de ancho completo para filtros específicos
      twoColumnLayout?.classList.add('hidden');
      fullWidthLayout?.classList.remove('hidden');
      
      if (currentFilter === 'tracks') {
        if (results.tracks?.items?.length > 0) {
          tracksSectionFull?.classList.remove('hidden');
          renderTracksListFull(results.tracks.items.slice(0, 20));
        }
      } else if (currentFilter === 'albums') {
        if (results.albums?.items?.length > 0) {
          albumsSectionFull?.classList.remove('hidden');
          renderAlbumsGridFull(results.albums.items.slice(0, 18));
        }
      } else if (currentFilter === 'artists') {
        if (results.artists?.items?.length > 0) {
          artistsSectionFull?.classList.remove('hidden');
          renderArtistsGridFull(results.artists.items.slice(0, 18));
        }
      }
    }
  }

  // Función para limpiar búsqueda
  function clearSearch() {
    currentSearchResults = null;
    welcomeContent?.classList.remove('hidden');
    searchResults?.classList.add('hidden');
  }

  // Función para calcular score de relevancia
  function calculateRelevanceScore(item: any, type: string) {
    let score = 0;
    
    // Factor base según el tipo
    const typeWeights: Record<string, number> = {
      'artist': 1.2,  // Los artistas suelen ser más relevantes en búsquedas generales
      'album': 1.0,
      'track': 0.8
    };
    
    score += typeWeights[type] || 1.0;
    
    // Para artistas: considerar seguidores
    if (type === 'artist' && item.followers?.total) {
      const followers = item.followers.total;
      if (followers > 1000000) score += 2.0;        // Más de 1M seguidores
      else if (followers > 100000) score += 1.5;    // Más de 100K seguidores
      else if (followers > 10000) score += 1.0;     // Más de 10K seguidores
      else score += 0.5;                            // Menos de 10K seguidores
    }
    
    // Para álbumes: considerar fecha de lanzamiento (más reciente = más relevante)
    if (type === 'album' && item.release_date) {
      const releaseYear = new Date(item.release_date).getFullYear();
      const currentYear = new Date().getFullYear();
      const yearsDiff = currentYear - releaseYear;
      
      if (yearsDiff <= 1) score += 1.5;      // Último año
      else if (yearsDiff <= 3) score += 1.0; // Últimos 3 años
      else if (yearsDiff <= 5) score += 0.5; // Últimos 5 años
      else score += 0.2;                     // Más antiguo
    }
    
    // Para canciones: considerar popularidad (si está disponible)
    if (type === 'track' && item.popularity) {
      if (item.popularity >= 80) score += 1.5;      // Muy popular
      else if (item.popularity >= 60) score += 1.0; // Popular
      else if (item.popularity >= 40) score += 0.5; // Moderadamente popular
      else score += 0.2;                            // Poco popular
    }
    
    // Bonus por ser el primer resultado de su categoría
    score += 0.3;
    
    return score;
  }

  // Función para renderizar resultado más relevante - Estilo exacto de la imagen
  function renderTopResult(results: any) {
    const topResultContent = document.getElementById('top-result-content');
    if (!topResultContent) return;

    // Determinar el resultado más relevante según el filtro actual
    let topItem = null;
    let topType = '';

    if (currentFilter === 'tracks' && results.tracks?.items?.length > 0) {
      topItem = results.tracks.items[0];
      topType = 'track';
    } else if (currentFilter === 'albums' && results.albums?.items?.length > 0) {
      topItem = results.albums.items[0];
      topType = 'album';
    } else if (currentFilter === 'artists' && results.artists?.items?.length > 0) {
      topItem = results.artists.items[0];
      topType = 'artist';
    } else if (currentFilter === 'all') {
      // Para "Todo", usar lógica inteligente para determinar el más relevante
      const candidates = [];
      
      // Agregar candidatos de cada tipo
      if (results.tracks?.items?.length > 0) {
        candidates.push({
          item: results.tracks.items[0],
          type: 'track',
          score: calculateRelevanceScore(results.tracks.items[0], 'track')
        });
      }
      
      if (results.albums?.items?.length > 0) {
        candidates.push({
          item: results.albums.items[0],
          type: 'album',
          score: calculateRelevanceScore(results.albums.items[0], 'album')
        });
      }
      
      if (results.artists?.items?.length > 0) {
        candidates.push({
          item: results.artists.items[0],
          type: 'artist',
          score: calculateRelevanceScore(results.artists.items[0], 'artist')
        });
      }
      
      // Seleccionar el candidato con mayor score
      if (candidates.length > 0) {
        candidates.sort((a, b) => b.score - a.score);
        topItem = candidates[0].item;
        topType = candidates[0].type;
      }
    }

    if (!topItem) return;

    const imageUrl = topItem.images?.[0]?.url || topItem.album?.images?.[0]?.url || '';
    const gradientClass = getGradientClass(topItem.name);
    
    let content = '';
    
    if (topType === 'track') {
      content = `
        <div class="flex flex-col space-y-3">
          <div class="w-32 h-32 ${gradientClass} rounded-lg flex items-center justify-center relative overflow-hidden mx-auto">
            ${imageUrl ? `
              <img src="${imageUrl}" alt="${topItem.name}" class="w-full h-full object-cover" onerror="this.style.display='none'; this.nextElementSibling.style.display='flex';">
              <svg class="w-12 h-12 text-white absolute inset-0 m-auto" fill="currentColor" viewBox="0 0 24 24">
                <path d="M8 5v14l11-7z"/>
              </svg>
            ` : `
              <svg class="w-12 h-12 text-white" fill="currentColor" viewBox="0 0 24 24">
                <path d="M8 5v14l11-7z"/>
              </svg>
            `}
          </div>
          <div class="text-center">
            <h3 class="text-white font-bold text-xl mb-1">${topItem.name}</h3>
            <p class="text-white/70 text-sm">Canción • ${topItem.artists?.map((a: any) => a.name).join(', ')}</p>
          </div>
        </div>
      `;
    } else if (topType === 'album') {
      content = `
        <div class="flex flex-col space-y-3">
          <div class="w-32 h-32 ${gradientClass} rounded-lg flex items-center justify-center relative overflow-hidden mx-auto">
            ${imageUrl ? `
              <img src="${imageUrl}" alt="${topItem.name}" class="w-full h-full object-cover" onerror="this.style.display='none'; this.nextElementSibling.style.display='flex';">
              <svg class="w-12 h-12 text-white absolute inset-0 m-auto" fill="currentColor" viewBox="0 0 24 24">
                <path d="M12 2C6.48 2 2 6.48 2 12s4.48 10 10 10 10-4.48 10-10S17.52 2 12 2zm-2 15l-5-5 1.41-1.41L10 14.17l7.59-7.59L19 8l-9 9z"/>
              </svg>
            ` : `
              <svg class="w-12 h-12 text-white" fill="currentColor" viewBox="0 0 24 24">
                <path d="M12 2C6.48 2 2 6.48 2 12s4.48 10 10 10 10-4.48 10-10S17.52 2 12 2zm-2 15l-5-5 1.41-1.41L10 14.17l7.59-7.59L19 8l-9 9z"/>
              </svg>
            `}
          </div>
          <div class="text-center">
            <h3 class="text-white font-bold text-xl mb-1">${topItem.name}</h3>
            <p class="text-white/70 text-sm">Álbum • ${topItem.artists?.map((a: any) => a.name).join(', ')}</p>
          </div>
        </div>
      `;
    } else if (topType === 'artist') {
      content = `
        <div class="flex flex-col space-y-3">
          <div class="w-32 h-32 ${gradientClass} rounded-full flex items-center justify-center relative overflow-hidden mx-auto">
            ${imageUrl ? `
              <img src="${imageUrl}" alt="${topItem.name}" class="w-full h-full object-cover rounded-full" onerror="this.style.display='none'; this.nextElementSibling.style.display='flex';">
              <svg class="w-12 h-12 text-white absolute inset-0 m-auto" fill="currentColor" viewBox="0 0 24 24">
                <path d="M12 2C6.48 2 2 6.48 2 12s4.48 10 10 10 10-4.48 10-10S17.52 2 12 2zm-2 15l-5-5 1.41-1.41L10 14.17l7.59-7.59L19 8l-9 9z"/>
              </svg>
            ` : `
              <svg class="w-12 h-12 text-white" fill="currentColor" viewBox="0 0 24 24">
                <path d="M12 2C6.48 2 2 6.48 2 12s4.48 10 10 10 10-4.48 10-10S17.52 2 12 2zm-2 15l-5-5 1.41-1.41L10 14.17l7.59-7.59L19 8l-9 9z"/>
              </svg>
            `}
          </div>
          <div class="text-center">
            <h3 class="text-white font-bold text-xl mb-1">${topItem.name}</h3>
            <p class="text-white/70 text-sm">Artista • ${topItem.followers?.total ? `${topItem.followers.total.toLocaleString()} seguidores` : 'Sin información'}</p>
          </div>
        </div>
      `;
    }

    topResultContent.innerHTML = content;
  }

  // Función para renderizar lista de canciones - Estilo exacto de la imagen
  function renderTracksList(tracks: any[]) {
    const tracksList = document.getElementById('tracks-list');
    const tracksSection = document.getElementById('tracks-section');
    if (!tracksList || !tracksSection) return;

    tracksSection.classList.remove('hidden');
    
    tracks.forEach((track, index) => {
      const trackElement = document.createElement('div');
      trackElement.className = 'flex items-center space-x-4 p-3 rounded-lg hover:bg-white/10 transition-all duration-200 cursor-pointer group';
      
      const imageUrl = track.album?.images?.[0]?.url || '';
      const gradientClass = getGradientClass(track.name);
      
      // La primera canción se destaca con color verde como en la imagen
      const isFirstTrack = index === 0;
      const titleColor = isFirstTrack ? 'text-green-400' : 'text-white';
      
      trackElement.innerHTML = `
        <div class="w-12 h-12 ${gradientClass} rounded flex items-center justify-center relative overflow-hidden group">
          ${imageUrl ? `
            <img src="${imageUrl}" alt="${track.name}" class="w-full h-full object-cover" onerror="this.style.display='none'; this.nextElementSibling.style.display='flex';">
            <div class="absolute inset-0 flex items-center justify-center">
              <button type="button" class="w-8 h-8 bg-green-500 rounded-full flex items-center justify-center opacity-0 group-hover:opacity-100 transition-all duration-200 transform group-hover:scale-110 shadow-lg play-preview-btn" data-preview-url="${track.preview_url || ''}" ${track.preview_url ? '' : 'disabled'}>
                <svg class="w-4 h-4 text-white ml-0.5" fill="currentColor" viewBox="0 0 24 24">
                  <path d="M8 5v14l11-7z"/>
                </svg>
              </button>
            </div>
          ` : `
            <div class="absolute inset-0 flex items-center justify-center">
              <button type="button" class="w-8 h-8 bg-green-500 rounded-full flex items-center justify-center opacity-0 group-hover:opacity-100 transition-all duration-200 transform group-hover:scale-110 shadow-lg play-preview-btn" data-preview-url="${track.preview_url || ''}" ${track.preview_url ? '' : 'disabled'}>
                <svg class="w-4 h-4 text-white ml-0.5" fill="currentColor" viewBox="0 0 24 24">
                  <path d="M8 5v14l11-7z"/>
                </svg>
              </button>
            </div>
          `}
        </div>
        <div class="flex-1 min-w-0">
          <h4 class="${titleColor} font-medium truncate">${track.name}</h4>
          <p class="text-white/70 text-sm truncate">${track.artists?.map((a: any) => a.name).join(', ')}</p>
        </div>
        <div class="flex items-center space-x-3">
          <div class="text-white text-sm">${track.duration_ms ? formatDuration(track.duration_ms) : ''}</div>
          <div class="favorite-button-container" data-spotify-id="${track.id}" data-type="track" data-name="${track.name}" data-image-url="${imageUrl}" data-external-url="${track.external_urls?.spotify || ''}"></div>
        </div>
      `;
      
      tracksList.appendChild(trackElement);
      
      // Renderizar botón de favoritos
      renderFavoriteButton(trackElement.querySelector('.favorite-button-container'), track.id, 'track', track.name, imageUrl, track.external_urls?.spotify);

      // Cambia el círculo de play para que sea un botón y si hay preview_url, lo use
      const playBtn = trackElement.querySelector('.play-preview-btn') as HTMLElement;
      if (playBtn && track.preview_url) {
        playBtn.addEventListener('click', (e) => {
          e.stopPropagation();
          console.log('Click en play-preview-btn', track.preview_url, playBtn);
          handlePlayPreview(track.preview_url, playBtn);
        });
      }
    });
  }

  // Función para formatear duración
  function formatDuration(ms: number) {
    const minutes = Math.floor(ms / 60000);
    const seconds = Math.floor((ms % 60000) / 1000);
    return `${minutes}:${seconds.toString().padStart(2, '0')}`;
  }

  // Función para renderizar botón de favoritos
  function renderFavoriteButton(container: Element | null, spotifyId: string, type: 'track' | 'album' | 'artist', name: string, imageUrl?: string, externalUrl?: string) {
    if (!container) return;
    
    // Crear el botón de favoritos con animaciones mejoradas
    const button = document.createElement('div');
    button.innerHTML = `
      <button 
        class="w-8 h-8 rounded-full bg-black/60 backdrop-blur-sm border border-white/30 flex items-center justify-center transition-all duration-300 hover:scale-125 hover:bg-green-500/20 hover:border-green-400 group favorite-btn shadow-lg hover:shadow-green-500/25"
        data-spotify-id="${spotifyId}"
        data-type="${type}"
        data-name="${name}"
        data-image-url="${imageUrl || ''}"
        data-external-url="${externalUrl || ''}"
        title="Agregar a favoritos"
      >
        <svg class="w-5 h-5 text-white/80 group-hover:text-white transition-all duration-300 transform group-hover:scale-110" fill="none" stroke="currentColor" viewBox="0 0 24 24">
          <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M4.318 6.318a4.5 4.5 0 000 6.364L12 20.364l7.682-7.682a4.5 4.5 0 00-6.364-6.364L12 7.636l-1.318-1.318a4.5 4.5 0 00-6.364 0z"/>
        </svg>
      </button>
    `;
    
    container.appendChild(button);
    
    // Agregar event listener para el botón
    const favoriteBtn = button.querySelector('.favorite-btn') as HTMLButtonElement;
    if (favoriteBtn) {
      favoriteBtn.addEventListener('click', async (e) => {
        e.preventDefault();
        e.stopPropagation();
        

        
        await toggleFavorite(favoriteBtn);
      });
      
      // Verificar estado inicial de favoritos
      checkInitialFavoriteStatus(favoriteBtn);
    }
  }

  // Función para verificar el estado inicial de favoritos
  async function checkInitialFavoriteStatus(button: HTMLButtonElement) {
    const spotifyId = button.getAttribute('data-spotify-id');
    const type = button.getAttribute('data-type') as 'track' | 'album' | 'artist';
    
    if (!spotifyId || !type) return;
    
    try {
      // Verificar si el usuario está logueado
      const authResponse = await fetch('/api/auth/me');
      if (!authResponse.ok) return;
      
      // Verificar si ya está en favoritos
      const favoritesResponse = await fetch('/api/favorites');
      if (favoritesResponse.ok) {
        const data = await favoritesResponse.json();
        if (data.success) {
          const favorites = data.data || [];
          const isFav = favorites.some((fav: any) => 
            fav.spotify_id === spotifyId && fav.type === type
          );
          
          if (isFav) {
            button.classList.add('is-favorite');
            button.title = 'Quitar de favoritos';
            const svg = button.querySelector('svg');
            if (svg) {
              svg.classList.add('text-green-400', 'fill-current');
              svg.classList.remove('text-white/80');
              svg.setAttribute('fill', 'currentColor');
            }
            // Cambiar colores del botón
            button.classList.add('bg-green-500/30', 'border-green-400', 'shadow-green-500/25');
            button.classList.remove('bg-black/60', 'border-white/30');
          }
        }
      }
    } catch (error) {
      console.error('Error checking initial favorite status:', error);
    }
  }

  // Función para alternar favoritos
  async function toggleFavorite(button: HTMLButtonElement) {
    const spotifyId = button.getAttribute('data-spotify-id');
    const type = button.getAttribute('data-type') as 'track' | 'album' | 'artist';
    const name = button.getAttribute('data-name');
    const imageUrl = button.getAttribute('data-image-url');
    const externalUrl = button.getAttribute('data-external-url');
    
    if (!spotifyId || !type || !name) return;
    
    // Verificar si el usuario está logueado
    try {
      const authResponse = await fetch('/api/auth/me');
      if (!authResponse.ok) {
        window.location.href = '/login';
        return;
      }
    } catch (error) {
      window.location.href = '/login';
      return;
    }
    
    // Verificar si ya es favorito
    const isFavorite = button.classList.contains('is-favorite');
    
    try {
      if (isFavorite) {
        // Eliminar de favoritos
        const response = await fetch(`/api/favorites/${spotifyId}`, {
          method: 'DELETE',
        });
        
        if (response.ok) {
          button.classList.remove('is-favorite');
          button.title = 'Agregar a favoritos';
          const svg = button.querySelector('svg');
          if (svg) {
            svg.classList.remove('text-green-400', 'fill-current');
            svg.classList.add('text-white/80');
            svg.setAttribute('fill', 'none');
          }
          // Restaurar colores del botón
          button.classList.remove('bg-green-500/30', 'border-green-400', 'shadow-green-500/25');
          button.classList.add('bg-black/60', 'border-white/30');
        }
      } else {
        // Agregar a favoritos
        const response = await fetch('/api/favorites', {
          method: 'POST',
          headers: {
            'Content-Type': 'application/json',
          },
          body: JSON.stringify({
            spotify_id: spotifyId,
            type: type,
            name: name,
            image_url: imageUrl || undefined,
            external_url: externalUrl || undefined,
          }),
        });
        
        if (response.ok) {
          button.classList.add('is-favorite');
          button.title = 'Quitar de favoritos';
          const svg = button.querySelector('svg');
          if (svg) {
            svg.classList.add('text-green-400', 'fill-current');
            svg.classList.remove('text-white/80');
            svg.setAttribute('fill', 'currentColor');
          }
          // Cambiar colores del botón
          button.classList.add('bg-green-500/30', 'border-green-400', 'shadow-green-500/25');
          button.classList.remove('bg-black/60', 'border-white/30');
          
          // Agregar animación de bombeo del corazón
          button.classList.add('heartbeat');
          setTimeout(() => button.classList.remove('heartbeat'), 600);
        }
      }
      
      // Disparar evento para actualizar sidebar
      window.dispatchEvent(new CustomEvent('favoritesUpdated'));
      
    } catch (error) {
      console.error('Error toggling favorite:', error);
    }
  }

  // Función para renderizar lista de canciones de ancho completo
  function renderTracksListFull(tracks: any[]) {
    const tracksListFull = document.getElementById('tracks-list-full');
    if (!tracksListFull) return;
    
    tracks.forEach((track, index) => {
      const trackElement = document.createElement('div');
      trackElement.className = 'flex items-center space-x-4 p-3 rounded-lg hover:bg-white/10 transition-all duration-200 cursor-pointer group';
      
      const imageUrl = track.album?.images?.[0]?.url || '';
      const gradientClass = getGradientClass(track.name);
      
      trackElement.innerHTML = `
        <div class="w-12 h-12 ${gradientClass} rounded flex items-center justify-center relative overflow-hidden group">
          ${imageUrl ? `
            <img src="${imageUrl}" alt="${track.name}" class="w-full h-full object-cover" onerror="this.style.display='none'; this.nextElementSibling.style.display='flex';">
            <div class="absolute inset-0 flex items-center justify-center">
              <button type="button" class="w-8 h-8 bg-green-500 rounded-full flex items-center justify-center opacity-0 group-hover:opacity-100 transition-all duration-200 transform group-hover:scale-110 shadow-lg play-preview-btn" data-preview-url="${track.preview_url || ''}" ${track.preview_url ? '' : 'disabled'}>
                <svg class="w-4 h-4 text-white ml-0.5" fill="currentColor" viewBox="0 0 24 24">
                  <path d="M8 5v14l11-7z"/>
                </svg>
              </button>
            </div>
          ` : `
            <div class="absolute inset-0 flex items-center justify-center">
              <button type="button" class="w-8 h-8 bg-green-500 rounded-full flex items-center justify-center opacity-0 group-hover:opacity-100 transition-all duration-200 transform group-hover:scale-110 shadow-lg play-preview-btn" data-preview-url="${track.preview_url || ''}" ${track.preview_url ? '' : 'disabled'}>
                <svg class="w-4 h-4 text-white ml-0.5" fill="currentColor" viewBox="0 0 24 24">
                  <path d="M8 5v14l11-7z"/>
                </svg>
              </button>
            </div>
          `}
        </div>
        <div class="flex-1 min-w-0">
          <h4 class="text-white font-medium truncate">${track.name}</h4>
          <p class="text-white/70 text-sm truncate">${track.artists?.map((a: any) => a.name).join(', ')}</p>
        </div>
        <div class="flex items-center space-x-3">
          <div class="text-white text-sm">${track.duration_ms ? formatDuration(track.duration_ms) : ''}</div>
          <div class="favorite-button-container" data-spotify-id="${track.id}" data-type="track" data-name="${track.name}" data-image-url="${imageUrl}" data-external-url="${track.external_urls?.spotify || ''}"></div>
        </div>
      `;
      
      tracksListFull.appendChild(trackElement);
      
      // Renderizar botón de favoritos
      renderFavoriteButton(trackElement.querySelector('.favorite-button-container'), track.id, 'track', track.name, imageUrl, track.external_urls?.spotify);

      // Cambia el círculo de play para que sea un botón y si hay preview_url, lo use
      const playBtn = trackElement.querySelector('.play-preview-btn') as HTMLElement;
      if (playBtn && track.preview_url) {
        playBtn.addEventListener('click', (e) => {
          e.stopPropagation();
          console.log('Click en play-preview-btn', track.preview_url, playBtn);
          handlePlayPreview(track.preview_url, playBtn);
        });
      }
    });
  } 

  // Función para renderizar grid de álbumes de ancho completo
  function renderAlbumsGridFull(albums: any[]) {
    const albumsGridFull = document.getElementById('albums-grid-full');
    if (!albumsGridFull) return;
    
    albums.forEach((album: any) => {
      const albumElement = document.createElement('div');
      albumElement.className = 'group cursor-pointer relative';
      
      const imageUrl = album.images?.[0]?.url || '';
      const gradientClass = getGradientClass(album.name);
      
      albumElement.innerHTML = `
        <div class="aspect-square ${gradientClass} rounded-lg mb-3 flex items-center justify-center relative overflow-hidden group-hover:scale-105 transition-all duration-200">
          ${imageUrl ? `
            <img src="${imageUrl}" alt="${album.name}" class="w-full h-full object-cover" onerror="this.style.display='none'; this.nextElementSibling.style.display='flex';">
            <div class="absolute inset-0 bg-black/20 group-hover:bg-black/40 transition-all duration-200"></div>
            <svg class="w-12 h-12 text-white relative z-10 opacity-0 group-hover:opacity-100 transition-all duration-200" fill="currentColor" viewBox="0 0 24 24">
              <path d="M8 5v14l11-7z"/>
            </svg>
          ` : `
            <svg class="w-12 h-12 text-white" fill="currentColor" viewBox="0 0 24 24">
              <path d="M8 5v14l11-7z"/>
            </svg>
          `}
          <div class="absolute top-2 right-2 favorite-button-container" data-spotify-id="${album.id}" data-type="album" data-name="${album.name}" data-image-url="${imageUrl}" data-external-url="${album.external_urls?.spotify || ''}"></div>
        </div>
        <h3 class="text-white font-semibold text-sm truncate mb-1">${album.name}</h3>
        <p class="text-white/70 text-xs truncate">${album.artists?.map((a: any) => a.name).join(', ')}</p>
        <p class="text-white/50 text-xs">${album.release_date ? new Date(album.release_date).getFullYear() : ''}</p>
      `;
      albumsGridFull.appendChild(albumElement);
      
      // Renderizar botón de favoritos
      renderFavoriteButton(albumElement.querySelector('.favorite-button-container'), album.id, 'album', album.name, imageUrl, album.external_urls?.spotify);
    });
  }

  // Función para renderizar grid de artistas de ancho completo
  function renderArtistsGridFull(artists: any[]) {
    const artistsGridFull = document.getElementById('artists-grid-full');
    if (!artistsGridFull) return;
    
    artists.forEach((artist: any) => {
      const artistElement = document.createElement('div');
      artistElement.className = 'group cursor-pointer text-center relative';
      
      const imageUrl = artist.images?.[0]?.url || '';
      const gradientClass = getGradientClass(artist.name);
      
      artistElement.innerHTML = `
        <div class="w-32 h-32 ${gradientClass} rounded-full mb-3 flex items-center justify-center relative overflow-hidden mx-auto group-hover:scale-105 transition-all duration-200">
          ${imageUrl ? `
            <img src="${imageUrl}" alt="${artist.name}" class="w-full h-full object-cover rounded-full" onerror="this.style.display='none'; this.nextElementSibling.style.display='flex';">
            <div class="absolute inset-0 bg-black/20 group-hover:bg-black/40 transition-all duration-200"></div>
            <svg class="w-8 h-8 text-white relative z-10 opacity-0 group-hover:opacity-100 transition-all duration-200" fill="currentColor" viewBox="0 0 24 24">
              <path d="M8 5v14l11-7z"/>
            </svg>
          ` : `
            <svg class="w-8 h-8 text-white" fill="currentColor" viewBox="0 0 24 24">
              <path d="M8 5v14l11-7z"/>
            </svg>
          `}
          <div class="absolute top-2 right-2 favorite-button-container" data-spotify-id="${artist.id}" data-type="artist" data-name="${artist.name}" data-image-url="${imageUrl}" data-external-url="${artist.external_urls?.spotify || ''}"></div>
        </div>
        <h3 class="text-white font-semibold text-sm truncate mb-1">${artist.name}</h3>
        <p class="text-white/70 text-xs">Artista</p>
      `;
      artistsGridFull.appendChild(artistElement);
      
      // Renderizar botón de favoritos
      renderFavoriteButton(artistElement.querySelector('.favorite-button-container'), artist.id, 'artist', artist.name, imageUrl, artist.external_urls?.spotify);
    });
  }

  // Función para cambiar filtro
  function changeFilter(filter: string) {
    currentFilter = filter;
    if (currentSearchResults) {
      showSearchResults(currentSearchResults);
    }
  }

  // Escuchar eventos del header
  window.addEventListener('searchResults', (event: any) => {
    showSearchResults(event.detail);
  });

  window.addEventListener('clearSearch', () => {
    clearSearch();
  });

  window.addEventListener('filterChanged', (event: any) => {
    changeFilter(event.detail.filter);
  });

  // Hacer que los elementos de recomendación sean clickeables
  document.addEventListener('DOMContentLoaded', () => {
    // Cargar recomendaciones al cargar la página
    loadRecommendations();

    // Configurar filtros en la sección de resultados
    const filterButtons = document.querySelectorAll('[data-filter]');
    filterButtons.forEach(btn => {
      btn.addEventListener('click', () => {
        const filterId = btn.getAttribute('data-filter');
        if (filterId) {
          // Actualizar estado visual de los filtros
          filterButtons.forEach(b => {
            b.classList.remove('bg-white', 'text-black', 'shadow-lg');
            b.classList.add('bg-gray-800/50', 'text-gray-300');
          });
          btn.classList.remove('bg-gray-800/50', 'text-gray-300');
          btn.classList.add('bg-white', 'text-black', 'shadow-lg');
          
          // Actualizar el filtro actual
          currentFilter = filterId;
          
          // Si hay resultados, filtrarlos
          if (currentSearchResults) {
            showSearchResults(currentSearchResults);
          }
          
          // Emitir evento para que el header sepa qué filtro está activo
          window.dispatchEvent(new CustomEvent('filterChanged', { 
            detail: { filter: filterId } 
          }));
        }
      });
    });
  });

  function handlePlayPreview(previewUrl: string, playBtn: HTMLElement) {
    // Si ya hay un audio sonando, pausarlo
    if (currentAudio) {
      currentAudio.pause();
      if (currentPlayButton) {
        currentPlayButton.innerHTML = `<svg class="w-4 h-4 text-white ml-0.5" fill="currentColor" viewBox="0 0 24 24"><path d="M8 5v14l11-7z"/></svg>`;
      }
      if (currentAudio.src === previewUrl) {
        currentAudio = null;
        currentPlayButton = null;
        return; // Si es el mismo, solo pausar
      }
    }
    // Crear nuevo audio
    currentAudio = new Audio(previewUrl);
    currentAudio.play();
    currentPlayButton = playBtn;
    // Cambiar a ícono de pausa
    playBtn.innerHTML = `<svg class="w-4 h-4 text-white ml-0.5" fill="currentColor" viewBox="0 0 24 24"><rect x="6" y="5" width="4" height="14"/><rect x="14" y="5" width="4" height="14"/></svg>`;
    // Cuando termine, volver a play
    currentAudio.onended = () => {
      playBtn.innerHTML = `<svg class="w-4 h-4 text-white ml-0.5" fill="currentColor" viewBox="0 0 24 24"><path d="M8 5v14l11-7z"/></svg>`;
      currentAudio = null;
      currentPlayButton = null;
    };
    // Si se pausa manualmente
    currentAudio.onpause = () => {
      playBtn.innerHTML = `<svg class="w-4 h-4 text-white ml-0.5" fill="currentColor" viewBox="0 0 24 24"><path d="M8 5v14l11-7z"/></svg>`;
      currentAudio = null;
      currentPlayButton = null;
    };
  }
</script>
